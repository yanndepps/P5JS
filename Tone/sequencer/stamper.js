/*
   ____    __    ____      ____    ______ ______           ____    ____    ____       
  /\  _\  _\ \ _/\__ \    /\  _`\ /\__  _/\  _  \  /'\_/`\/\  _`\ /\  _`\ /\  _`\     
  \ \ \/ /\_` ' \/_/\ \   \ \,\L\_\/_/\ \\ \ \L\ \/\      \ \ \L\ \ \ \L\_\ \ \L\ \   
   \ \ \ \/_>   <_ \ \ \   \/_\__ \  \ \ \\ \  __ \ \ \__\ \ \ ,__/\ \  _\L\ \ ,  /   
    \ \ \_ /\_, ,_\ \_\ \    /\ \L\ \ \ \ \\ \ \/\ \ \ \_/\ \ \ \/  \ \ \L\ \ \ \\ \  
     \ \___\/_/\_\/ /\___\   \ `\____\ \ \_\\ \_\ \_\ \_\\ \_\ \_\   \ \____/\ \_\ \_\
      \/___/  \/_/  \/___/    \/_____/  \/_/ \/_/\/_/\/_/ \/_/\/_/    \/___/  \/_/\/ /


Hello and welcome to your Stamper metadata file! 
This file keeps track of all of the info Stamper needs about your stamps. 

Don't worry, it won't affect your sketch if you run it on any other IDE.

Please DON'T MODIFY ANY OF THE INFORMATION BELOW or else your project may behave unexpectantly in Stamper.
However, if your project is acting strangely, delete this file and reopen your project. 
You'll lose your stamps' formatting but keep all of the code.

Happy Stamping :)

*/

{"stamps":[{"id":"iuumv3wom","name":"/*","code":"/*\n* Tone.js and P5.js demo\n* Sequencer \n*/","args":" ","x":427.70614641268145,"y":199.83062998181776,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":683,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"m1xd2cr82","name":"//  the synth","code":"//  the synth\nlet synth;","args":" ","x":427.70614641268145,"y":499.83062998181776,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":684,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"whgk7zsm5","name":"//  whether the...","code":"//  whether the audio sequence is playing\nlet playing = false;","args":" ","x":427.70614641268145,"y":799.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":685,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"mh4evkhmj","name":"//  the current...","code":"//  the current Tone.sequence\nlet sequence;","args":" ","x":427.70614641268145,"y":1099.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":686,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"3h3bhheis","name":"//  the current...","code":"//  the currently playing column\nlet currentColumn = 0;","args":" ","x":427.70614641268145,"y":1399.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":687,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"z0j8e3vda","name":"//  a fixed sca...","code":"//  a fixed scale in use\n//  const notes = [ 'A3', 'C4', 'D4', 'E4', 'G4' ];","args":" ","x":427.70614641268145,"y":1699.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":688,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"r36140nly","name":"//  Also can tr...","code":"//  Also can try other scales/notes\nconst notes = [\"F#4\", \"E4\", \"C#4\", \"A4\"];\n//  const notes = ['A3', 'C4', 'D4', 'E4', 'G4', 'A4'];\n//  const notes = [ \"A4\", \"D3\", \"E3\", \"G4\", 'F#4' ];","args":" ","x":427.70614641268145,"y":1999.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":689,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"k3lnsy2fp","name":"//  number of r...","code":"//  number of rows is the number of different notes\nconst numRows = notes.length;","args":" ","x":427.70614641268145,"y":2299.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":690,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"hlamv35m6","name":"//  number of c...","code":"//  number of columns is depending on how many notes to play in a measure\nconst numCols = 16;\nconst noteInterval = `${numCols}n`;","args":" ","x":427.70614641268145,"y":2599.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":691,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"937baen3v","name":"//  setup audio...","code":"//  setup audio config\nTone.Transport.bpm.value = 120;","args":" ","x":427.70614641268145,"y":2899.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":692,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"keupmp4u9","name":"//  create a Ro...","code":"//  create a Row*Col data structure that has nested arrays\n//  [ [ 0, 0, 0 ], [ 0, 0, 0 ], ...]\n//  the data can be 0 (off) or 1 (on)\nconst data = [];\nfor (let y = 0; y < numRows; y++) {\n    const row = [];\n    for (let x = 0; x < numCols; x++) {\n        row.push(0);\n    }\n    data.push(row);\n}","args":" ","x":427.70614641268145,"y":3199.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":693,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"goshqdzxo","name":"//  create a ne...","code":"//  create a new canvas to the browser size","args":" ","x":427.70614641268145,"y":3499.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":694,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"lqz3q0igz","name":"setup","code":"\n    // setup canvas as a square\n    const dim = max(windowWidth, windowHeight);\n    createCanvas(dim, dim);\n    pixelDensity(window.devicePixelRatio);\n\n    // clear with black on setup\n    background(0);\n\n    // setup a reverb with ToneJS\n    const reverb = new Tone.Reverb({\n        decay: 4,\n        wet: 0.2,\n        preDelay: 0.25\n    });\n\n    // load the reverb\n    await reverb.generate();\n\n    // create an effect node that creates a feedback delay\n    const effect = new Tone.FeedbackDelay(`${Math.floor(numCols / 2)}n`, 1 / 3);\n    effect.wet.value = 0.2;\n\n    // setup a synth with ToneJS\n    // use a poly synth which can hold up to numRows voices\n    // play each note on a different voice\n    synth = new Tone.PolySynth(numRows, Tone.DuoSynth);\n\n    // setup the synth\n    synth.set({\n        voice0: {\n            oscillator: {\n                type: \"triangle4\"\n            },\n            volume: -30,\n            envelope: {\n                attack: 0.005,\n                release: 0.05,\n                sustain: 1\n            }\n        },\n        voice1: {\n            volume: -10,\n            envelope: {\n                attack: 0.005,\n                release: 0.05,\n                sustain: 1\n            }\n        }\n    });\n    synth.volume.value = -10;\n\n    // write up our nodes\n    synth.connect(effect);\n    synth.connect(Tone.Master);\n    effect.connect(reverb);\n    reverb.connect(Tone.Master);\n\n    // every tow measure we randomize the notes\n    // we use Transport to schedule timer since it has \n    // to be exactly in sync with the audio\n    Tone.Transport.scheduleRepeat(() => {\n        randomizeSequencer();\n    }, \"2m\");\n","args":"","x":427.70614641268145,"y":3799.8306299818178,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":695,"isBlob":false,"codeSize":14,"icon":"./static/media/tool.d68b9b61.svg","lineHighLightingStatus":"none"},{"id":"k0ck8o0cu","name":"//  on window r...","code":"//  on window resize, update the canvas size","args":" ","x":427.70614641268145,"y":4179.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":696,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"z7r3oztyt","name":"windowResized","code":"\n    const dim = max(windowWidth, windowHeight);\n    resizeCanvas(dim, dim);\n","args":"","x":427.70614641268145,"y":4479.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":697,"isBlob":false,"codeSize":14,"icon":"./static/media/bell.86facacc.svg","lineHighLightingStatus":"none"},{"id":"r1tpzakp1","name":"//  p5 render l...","code":"//  p5 render loop","args":" ","x":427.70614641268145,"y":4859.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":698,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"1g5ibkknr","name":"draw","code":"\n    // the synth isn't loaded yet, don't draw anything\n    if (!synth) return;\n\n    const dim = min(width, height);\n\n    // black background\n    background(0);\n\n    if (playing) {\n        // the audio is playing so we can show the Sequencer\n        const margin = dim * 0.2;\n        const innerSize = dim - margin * 2;\n        const cellSize = innerSize / numCols;\n\n        // loop through the nested data structure, drawing each note\n        for (let y = 0; y < data.length; y++) {\n            const row = data[y];\n            for (let x = 0; x < row.length; x++) {\n                const u = x / (numCols - 1);\n                const v = y / (numRows - 1);\n                let px = lerp(margin, dim - margin, u);\n                let py = lerp(margin, dim - margin, v);\n\n                noStroke();\n                noFill();\n\n                // note on=fill, note off=stroke \n                if (row[x] === 1) fill(255);\n                else stroke(255);\n\n                // draw note\n                circle(px, py, cellSize / 2);\n\n                // draw a rectangle around the currently playing column\n                if (x === currentColumn) {\n                    rectMode(CENTER);\n                    rect(px, py, cellSize, cellSize);\n                }\n            }\n        }\n    } else {\n        // draw a 'play' button\n        noStroke();\n        fill(255);\n        polygon(width / 2, height / 2, dim * 0.1, 3);\n    }\n","args":"","x":427.70614641268145,"y":5159.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":699,"isBlob":false,"codeSize":14,"icon":"./static/media/tool.d68b9b61.svg","lineHighLightingStatus":"none"},{"id":"2rqwa2lje","name":"//  randomize t...","code":"//  randomize the sequencer with some data","args":" ","x":427.70614641268145,"y":5539.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":700,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"lhcdzc8xd","name":"randomizeSequencer","code":"\n    // choose a % chance that sometimes it is more busy, other times more sparse\n    const chance = random(0.5, 1.5);\n    for (let y = 0; y < data.length; y++) {\n        // loop through and create some random on/off value\n        const row = data[y];\n        for (let x = 0; x < row.length; x++) {\n            row[x] = randomGaussian() > chance ? 1 : 0;\n        }\n        // loop through again and make sure we don't have two\n        // consecutive 'on' values (sounds bad)\n        for (let x = 0; x < row.length - 1; x++) {\n            if (row[x] === 1 && row[x + 1] === 1) {\n                row[x + 1] = 0;\n                x++;\n            }\n        }\n    }\n","args":"","x":427.70614641268145,"y":5839.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":701,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"qyfzhj5m0","name":"//  when the mo...","code":"//  when the mouse is pressed turn on the sequencer","args":" ","x":427.70614641268145,"y":6219.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":702,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"vmc6xeoer","name":"mousePressed","code":"\n    // no synth loaded yet, skip mouse click\n    if (!synth) {\n        return;\n    }\n\n    if (playing) {\n        // if we are currently playing, stop the sequencer\n        playing = false;\n        sequence.stop();\n        Tone.Transport.stop();\n    } else {\n        // if we aren't currently playing, start the sequence\n        // we do this by creating an array of indices [ 0, 1, 2, ... 15 ]\n        const noteIndices = newArray(numCols);\n        // create the sequence passing onSequenceStep function\n        sequence = new Tone.Sequence(onSequenceStep, noteIndices, noteInterval);\n\n        // start the sequence and transport loop\n        playing = true;\n        sequence.start();\n        Tone.Transport.start();\n    }\n","args":"","x":427.70614641268145,"y":6519.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":703,"isBlob":false,"codeSize":14,"icon":"./static/media/bell.86facacc.svg","lineHighLightingStatus":"none"},{"id":"16lv7bfe7","name":"//  here is whe...","code":"//  here is where we actually play the audio","args":" ","x":427.70614641268145,"y":6899.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":704,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"6csrwj9rq","name":"onSequenceStep","code":"\n    // we build up a list of notes, which will equal\n    // the numRows. This gets passed into our PolySynth\n    let notesToPlay = [];\n\n    // go through each row\n    data.forEach((row, rowIndex) => {\n        // see if the note is 'on'\n        const isOn = row[column] == 1;\n        // if it is on, add it to the list of notes to play\n        if (isOn) {\n            const note = notes[rowIndex];\n            notesToPlay.push(note);\n        }\n    });\n\n    // trigger a note\n    const velocity = random(0.5, 1);\n    synth.triggerAttackRelease(notesToPlay, noteInterval, time, velocity);\n    Tone.Draw.schedule(function() {\n        currentColumn = column;\n    }, time);\n","args":"time, column","x":427.70614641268145,"y":7199.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":705,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"yv5nukzb2","name":"//  draw a basi...","code":"//  draw a basic polygon, handles triangles, squares, pentagons, etc","args":" ","x":427.70614641268145,"y":7579.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":706,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"ok461btrz","name":"polygon","code":"\n    beginShape();\n    for (let i = 0; i < sides; i++) {\n        const a = angle + TWO_PI * (i / sides);\n        let sx = x + cos(a) * radius;\n        let sy = y + sin(a) * radius;\n        vertex(sx, sy);\n    }\n    endShape(CLOSE);\n","args":"x, y, radius, sides = 3, angle = 0","x":427.70614641268145,"y":7879.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":707,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"gahg0p8u1","name":"//  a utility f...","code":"//  a utility function to create a new array\n//  full of indices [ 0, 1, 2, ... (N - 1) ]","args":" ","x":427.70614641268145,"y":8259.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":0,"iframeHeight":0,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":708,"isBlob":true,"codeSize":14,"icon":"./static/media/globe.50d70b6d.svg","lineHighLightingStatus":"none"},{"id":"5grae9ok4","name":"newArray","code":"\n    const array = [];\n    for (let i = 0; i < n; i++) {\n        array.push(i);\n    }\n    return array;\n","args":"n","x":427.70614641268145,"y":8559.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":false,"isTxtFile":false,"isMediaFile":false,"hidden":false,"exported":true,"zIndex":709,"isBlob":false,"codeSize":14,"icon":"./static/media/box.310d8273.svg","lineHighLightingStatus":"none"},{"id":"vytv3wm8f","name":"index.html","code":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Sequencer</title>\n    <style>\n        body, html {\n            padding: 0;\n            margin: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background: hsl(0, 0%, 0%);\n            box-sizing: border-box;\n            padding: 80px;\n        }\n        canvas {\n            background: white;\n            cursor: pointer;\n            box-sizing: border-box;\n            width: 100vmin !important;\n            height: auto !important;\n        }\n    </style>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js\"></script>\n    <!-- We use unpkg instead of cdnjs as its recommended by tone.js docs -->\n    <script src=\"https://unpkg.com/tone@13.8.25/build/Tone.js\"></script>\n    <script src=\"sketch.js\"></script>\n</head>\n<body>\n    \n</body>\n</html>","args":" ","x":427.70614641268145,"y":8939.830629981818,"editorWidth":300,"editorHeight":200,"iframeWidth":100,"iframeHeight":100,"isIndex":true,"isTxtFile":false,"isMediaFile":false,"hidden":true,"exported":true,"isBlob":false,"codeSize":14,"icon":"./static/media/layout.8a437d55.svg","lineHighLightingStatus":"none"}],"scale":0.7,"originX":265,"originY":-5185,"worldEdited":false,"snapToGrid":false,"linesOn":false,"js":"\n/*\n* Tone.js and P5.js demo\n* Sequencer \n*/\n\n\n\n//  the synth\nlet synth;\n\n\n\n//  whether the audio sequence is playing\nlet playing = false;\n\n\n\n//  the current Tone.sequence\nlet sequence;\n\n\n\n//  the currently playing column\nlet currentColumn = 0;\n\n\n\n//  a fixed scale in use\n//  const notes = [ 'A3', 'C4', 'D4', 'E4', 'G4' ];\n\n\n\n//  Also can try other scales/notes\nconst notes = [\"F#4\", \"E4\", \"C#4\", \"A4\"];\n//  const notes = ['A3', 'C4', 'D4', 'E4', 'G4', 'A4'];\n//  const notes = [ \"A4\", \"D3\", \"E3\", \"G4\", 'F#4' ];\n\n\n\n//  number of rows is the number of different notes\nconst numRows = notes.length;\n\n\n\n//  number of columns is depending on how many notes to play in a measure\nconst numCols = 16;\nconst noteInterval = `${numCols}n`;\n\n\n\n//  setup audio config\nTone.Transport.bpm.value = 120;\n\n\n\n//  create a Row*Col data structure that has nested arrays\n//  [ [ 0, 0, 0 ], [ 0, 0, 0 ], ...]\n//  the data can be 0 (off) or 1 (on)\nconst data = [];\nfor (let y = 0; y < numRows; y++) {\n    const row = [];\n    for (let x = 0; x < numCols; x++) {\n        row.push(0);\n    }\n    data.push(row);\n}\n\n\n\n//  create a new canvas to the browser size\n\n\nfunction setup(){\n  \n      // setup canvas as a square\n      const dim = max(windowWidth, windowHeight);\n      createCanvas(dim, dim);\n      pixelDensity(window.devicePixelRatio);\n  \n      // clear with black on setup\n      background(0);\n  \n      // setup a reverb with ToneJS\n      const reverb = new Tone.Reverb({\n          decay: 4,\n          wet: 0.2,\n          preDelay: 0.25\n      });\n  \n      // load the reverb\n      await reverb.generate();\n  \n      // create an effect node that creates a feedback delay\n      const effect = new Tone.FeedbackDelay(`${Math.floor(numCols / 2)}n`, 1 / 3);\n      effect.wet.value = 0.2;\n  \n      // setup a synth with ToneJS\n      // use a poly synth which can hold up to numRows voices\n      // play each note on a different voice\n      synth = new Tone.PolySynth(numRows, Tone.DuoSynth);\n  \n      // setup the synth\n      synth.set({\n          voice0: {\n              oscillator: {\n                  type: \"triangle4\"\n              },\n              volume: -30,\n              envelope: {\n                  attack: 0.005,\n                  release: 0.05,\n                  sustain: 1\n              }\n          },\n          voice1: {\n              volume: -10,\n              envelope: {\n                  attack: 0.005,\n                  release: 0.05,\n                  sustain: 1\n              }\n          }\n      });\n      synth.volume.value = -10;\n  \n      // write up our nodes\n      synth.connect(effect);\n      synth.connect(Tone.Master);\n      effect.connect(reverb);\n      reverb.connect(Tone.Master);\n  \n      // every tow measure we randomize the notes\n      // we use Transport to schedule timer since it has \n      // to be exactly in sync with the audio\n      Tone.Transport.scheduleRepeat(() => {\n          randomizeSequencer();\n      }, \"2m\");\n  \n}\n\n\n//  on window resize, update the canvas size\n\n\nfunction windowResized(){\n  \n      const dim = max(windowWidth, windowHeight);\n      resizeCanvas(dim, dim);\n  \n}\n\n\n//  p5 render loop\n\n\nfunction draw(){\n  \n      // the synth isn't loaded yet, don't draw anything\n      if (!synth) return;\n  \n      const dim = min(width, height);\n  \n      // black background\n      background(0);\n  \n      if (playing) {\n          // the audio is playing so we can show the Sequencer\n          const margin = dim * 0.2;\n          const innerSize = dim - margin * 2;\n          const cellSize = innerSize / numCols;\n  \n          // loop through the nested data structure, drawing each note\n          for (let y = 0; y < data.length; y++) {\n              const row = data[y];\n              for (let x = 0; x < row.length; x++) {\n                  const u = x / (numCols - 1);\n                  const v = y / (numRows - 1);\n                  let px = lerp(margin, dim - margin, u);\n                  let py = lerp(margin, dim - margin, v);\n  \n                  noStroke();\n                  noFill();\n  \n                  // note on=fill, note off=stroke \n                  if (row[x] === 1) fill(255);\n                  else stroke(255);\n  \n                  // draw note\n                  circle(px, py, cellSize / 2);\n  \n                  // draw a rectangle around the currently playing column\n                  if (x === currentColumn) {\n                      rectMode(CENTER);\n                      rect(px, py, cellSize, cellSize);\n                  }\n              }\n          }\n      } else {\n          // draw a 'play' button\n          noStroke();\n          fill(255);\n          polygon(width / 2, height / 2, dim * 0.1, 3);\n      }\n  \n}\n\n\n//  randomize the sequencer with some data\n\n\nfunction randomizeSequencer(){\n  \n      // choose a % chance that sometimes it is more busy, other times more sparse\n      const chance = random(0.5, 1.5);\n      for (let y = 0; y < data.length; y++) {\n          // loop through and create some random on/off value\n          const row = data[y];\n          for (let x = 0; x < row.length; x++) {\n              row[x] = randomGaussian() > chance ? 1 : 0;\n          }\n          // loop through again and make sure we don't have two\n          // consecutive 'on' values (sounds bad)\n          for (let x = 0; x < row.length - 1; x++) {\n              if (row[x] === 1 && row[x + 1] === 1) {\n                  row[x + 1] = 0;\n                  x++;\n              }\n          }\n      }\n  \n}\n\n\n//  when the mouse is pressed turn on the sequencer\n\n\nfunction mousePressed(){\n  \n      // no synth loaded yet, skip mouse click\n      if (!synth) {\n          return;\n      }\n  \n      if (playing) {\n          // if we are currently playing, stop the sequencer\n          playing = false;\n          sequence.stop();\n          Tone.Transport.stop();\n      } else {\n          // if we aren't currently playing, start the sequence\n          // we do this by creating an array of indices [ 0, 1, 2, ... 15 ]\n          const noteIndices = newArray(numCols);\n          // create the sequence passing onSequenceStep function\n          sequence = new Tone.Sequence(onSequenceStep, noteIndices, noteInterval);\n  \n          // start the sequence and transport loop\n          playing = true;\n          sequence.start();\n          Tone.Transport.start();\n      }\n  \n}\n\n\n//  here is where we actually play the audio\n\n\nfunction onSequenceStep(time, column){\n  \n      // we build up a list of notes, which will equal\n      // the numRows. This gets passed into our PolySynth\n      let notesToPlay = [];\n  \n      // go through each row\n      data.forEach((row, rowIndex) => {\n          // see if the note is 'on'\n          const isOn = row[column] == 1;\n          // if it is on, add it to the list of notes to play\n          if (isOn) {\n              const note = notes[rowIndex];\n              notesToPlay.push(note);\n          }\n      });\n  \n      // trigger a note\n      const velocity = random(0.5, 1);\n      synth.triggerAttackRelease(notesToPlay, noteInterval, time, velocity);\n      Tone.Draw.schedule(function() {\n          currentColumn = column;\n      }, time);\n  \n}\n\n\n//  draw a basic polygon, handles triangles, squares, pentagons, etc\n\n\nfunction polygon(x, y, radius, sides = 3, angle = 0){\n  \n      beginShape();\n      for (let i = 0; i < sides; i++) {\n          const a = angle + TWO_PI * (i / sides);\n          let sx = x + cos(a) * radius;\n          let sy = y + sin(a) * radius;\n          vertex(sx, sy);\n      }\n      endShape(CLOSE);\n  \n}\n\n\n//  a utility function to create a new array\n//  full of indices [ 0, 1, 2, ... (N - 1) ]\n\n\nfunction newArray(n){\n  \n      const array = [];\n      for (let i = 0; i < n; i++) {\n          array.push(i);\n      }\n      return array;\n  \n}\n","highlightedLines":{}}